#include <iostream>
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/Audio.hpp>

using namespace std;
using namespace sf;

//menue variables and functions
bool isPaused = false;
int game_state = 0; //0: at the start menu / 1: the game is playing / 
int selectedOption = 0; // for the menu
bool isSettingsOpen = false;
bool boxVys = false;
bool boxAlis = false;
int alising = 0;
// a function for the options of the menu by the keyboard
void menufun(int& option, Event event) {

	if (event.type == Event::KeyPressed && event.key.code == Keyboard::Up) {
		option = (option + 2) % 3;
	}
	if (event.type == Event::KeyPressed && event.key.code == Keyboard::Down) {
		option = (option + 1) % 3;
	}
}

// hover effect function
void checkOption(int selectedOption, Text arr[], int x, int y, int z) {



	if (selectedOption == 0) {
		arr[x].setFillColor(Color::Black);
		arr[y].setFillColor(Color(128, 128, 128));
		arr[z].setFillColor(Color(128, 128, 128));

	}

	if (selectedOption == 1) {
		arr[x].setFillColor(Color(128, 128, 128));
		arr[y].setFillColor(Color::Black);
		arr[z].setFillColor(Color(128, 128, 128));
	}

	if (selectedOption == 2) {
		arr[x].setFillColor(Color(128, 128, 128));
		arr[y].setFillColor(Color(128, 128, 128));
		arr[z].setFillColor(Color::Black);
	}

}

// a function to check if the mouse is on the box or not
bool isMouseOver(RenderWindow& window, RectangleShape box[], int x) {

	float mouseX = Mouse::getPosition(window).x;
	float mouseY = Mouse::getPosition(window).y;

	float bxPosX = box[x].getPosition().x;
	float bxPosY = box[x].getPosition().y;

	float bxPosXwidth = box[x].getPosition().x + box[x].getLocalBounds().width;
	float bxPosYheight = box[x].getPosition().y + box[x].getLocalBounds().height;

	if (mouseX < bxPosXwidth && mouseX > bxPosX && mouseY < bxPosYheight && mouseY > bxPosY)
		return true;

	return false;
}

// a function to change selected option by the mouse
bool check = false; // to check if the mouse is on the box or not
void menuMouse(RectangleShape box[], int& selectedOption, RenderWindow& window, bool& check,int i) {

	for ( i ; i < 6; i++) {
		if (isMouseOver(window, box, i)) {
			selectedOption = i % 3;
			check = true;
			break;
		}
		else
		{
			check = false;
		}
	}


}

//settinds function 
void settingsFun(RenderWindow &window,RectangleShape settingsBoxes[],Event event) {

	if (isMouseOver(window, settingsBoxes, 2) && event.type == Event::MouseButtonPressed && !boxVys) {
		settingsBoxes[2].setFillColor(Color::Black);
		boxVys = true;
	}
	else if (isMouseOver(window, settingsBoxes, 2) && event.type == Event::MouseButtonPressed && boxVys) {
		settingsBoxes[2].setFillColor(Color::White);
		boxVys = false;

	}
	if (isMouseOver(window, settingsBoxes, 3) && event.type == Event::MouseButtonPressed && !boxAlis) {
		settingsBoxes[3].setFillColor(Color::Black);
		boxAlis = true;
	}
	else if (isMouseOver(window, settingsBoxes, 3) && event.type == Event::MouseButtonPressed && boxAlis) {
		settingsBoxes[3].setFillColor(Color::White);
		boxAlis = false;

	}
	if (isMouseOver(window, settingsBoxes, 4) && event.type == Event::MouseButtonPressed)
	{
		isSettingsOpen = false;
	}
}


RectangleShape Dinosaur(Vector2f(20.0f, 40.0f));
int main()
{

	//boxes for the menu
	RectangleShape menuboxes[6];

	for (int i = 0; i < 6; i++) {
		menuboxes[i].setFillColor(Color::Transparent);

	}
	//setting proper position for each menu box
	menuboxes[0].setSize(Vector2f{ 400,115 });
	menuboxes[0].setPosition(295, 245);
	menuboxes[1].setSize(Vector2f{ 550,115 });
	menuboxes[1].setPosition(210, 270 + 150);
	menuboxes[2].setSize(Vector2f{ 300,115 });
	menuboxes[2].setPosition(315, 290 + 300);
	menuboxes[3].setSize(Vector2f{ 400,115 });
	menuboxes[3].setPosition(840, 346);
	menuboxes[4].setSize(Vector2f{ 550,115 });
	menuboxes[4].setPosition(820, 346 + 150);
	menuboxes[5].setSize(Vector2f{ 300,115 });
	menuboxes[5].setPosition(820, 346 + 300);

	//the fonts
	Font font;
	if (!font.loadFromFile("font-bold.ttf"))
	{
		// Handle font loading error
		return EXIT_FAILURE;
	}
	Text menu[6];
	for (int i = 0; i < 6; i++) {
		menu[i].setFont(font);
		menu[i].setFillColor(Color(128, 128, 128));
		menu[i].setCharacterSize(130);
	}

	//start text   
	menu[0].setPosition(285, 225);
	menu[0].setString(" Start");
	//settings text
	menu[1].setPosition(215, 240 + 150);
	menu[1].setString("Settings");
	// quit text
	menu[2].setPosition(285, 265 + 300);
	menu[2].setString(" Quit");
	//resume text
	menu[3].setPosition(840, 346);
	menu[3].setString("Resume");
	//settings text
	menu[4].setPosition(820, 346 + 150);
	menu[4].setString("Settings");
	// quit text
	menu[5].setPosition(820, 346 + 300);
	menu[5].setString("   Quit");

	// game title
	Text titletext("Google Dinosaur", font, 100);
	titletext.setFillColor(Color::Black);
	titletext.setPosition(560, 40);
	//instractions
	Text paneltext("Google Dinosaur is a simple game where you \n need to avoid obstacles as much as you \n can to keep surviving", font, 25);
	paneltext.setFillColor(Color::Black);
	paneltext.setPosition(1300, 300);
	//========================settings ==============================
	Text settingsText[5];
	for (int i =1; i < 4; i++) {
		settingsText[i].setFont(font);
		settingsText[i].setFillColor(Color::Black);
		settingsText[i].setCharacterSize(60);
	}
	settingsText[0].setFont(font);
	settingsText[0].setFillColor(Color::Black);
	settingsText[0].setCharacterSize(80); 
	settingsText[0].setPosition( 350 , 250);
	settingsText[0].setString("Settings");

	settingsText[1].setPosition(250, 400);
	settingsText[1].setString("Vysnc");

	settingsText[2].setPosition(250, 500);
	settingsText[2].setString("Anti alising");


	settingsText[3].setPosition(250, 600);
	settingsText[3].setString("Mute music");

	settingsText[4].setFont(font);
	settingsText[4].setFillColor(Color::Black);
	settingsText[4].setCharacterSize(80);
	settingsText[4].setPosition(400, 750);
	settingsText[4].setString("Back");

	// boxes for the settings
	RectangleShape settingsBoxes[5];
	for (int i = 0; i < 2; i++) {
		settingsBoxes[i].setFillColor(Color::Black);

	}
	for (int i = 2; i < 4; i++) {
		settingsBoxes[i].setFillColor(Color::White);

	}

	//back box
	settingsBoxes[4].setFillColor(Color::Transparent);
	settingsBoxes[4].setSize(Vector2f{ 200,70 });
	settingsBoxes[4].setPosition(400, 770);

	//vysnc boxes
	settingsBoxes[0].setSize(Vector2f{ 70,70 });
	settingsBoxes[0].setPosition(700, 400);
	settingsBoxes[2].setSize(Vector2f{ 50,50 });
	settingsBoxes[2].setPosition(710, 410);

	//alising boxes
	settingsBoxes[1].setSize(Vector2f{ 70,70 });
	settingsBoxes[1].setPosition(700, 500);
	settingsBoxes[3].setSize(Vector2f{ 50,50 });
	settingsBoxes[3].setPosition(710, 510);



	//====================textures for menu =======================
	Texture texture[6];
	texture[0].loadFromFile("Background.png");
	texture[1].loadFromFile("dino.png");
	texture[2].loadFromFile("cactus 1.png");
	texture[3].loadFromFile("birds.png");
	texture[4].loadFromFile("instruction.png");
	texture[5].loadFromFile("instruction (4).png");

	Sprite textures[6];
	for (int j = 0; j < 6; j++) 
	{
		textures[j].setTexture(texture[j]);
    }
	//background for the start menu
	textures[0].setScale(1, 1);
	//dino//
	textures[1].setPosition(70, 780);
	textures[1].setScale(0.3, 0.3);
	//cactus//
	textures[2].setPosition(550, 805);
	textures[2].setScale(3, 3);
	//birds//
	textures[3].setPosition(850, 510);
	textures[3].setScale(1.5, 1.5);
	textures[3].setTextureRect(IntRect(94, 0, 188, 80));
	//panel for the instructions
	textures[4].setPosition(1180, 90);
	textures[4].setScale(0.85, 0.85);
	//panel for settings
	textures[5].setPosition(150,90);
	textures[5].setScale(0.85, 0.85);

	//=================sound system============================
	/*
	  sound buffers order
	  1- Start Menu Music
	  2- Start Game Button Click sound
	  3- Other buttons Click sound
	  4- Jump sound
	  5- Each 100 points reach sound
	  6- Death sound
	  7- Pause Menu Music
	*/

	//Sounds
//Check if can't open any audio file
	SoundBuffer buffer[7];
	if (!buffer[0].loadFromFile("Start Menu Music.mp3")
		|| !buffer[1].loadFromFile("Game Start Button Click Sound.mp3")
		|| !buffer[2].loadFromFile("Other Buttons Click sound.mp3")
		|| !buffer[3].loadFromFile("Jump sound.mp3")
		|| !buffer[4].loadFromFile("100 Points reach sound.mp3")
		|| !buffer[5].loadFromFile("Die sound.mp3")
		|| !buffer[6].loadFromFile("Pause Menu Music.mp3")
		)
		cerr << "Cannot Open File from path specified!!";

	Sound sound[7];
	for (int i = 0; i < 7; i++)
		sound[i].setBuffer(buffer[i]);

	// volume for the background sounds 
	sound[0].setVolume(50.0f);
	sound[6].setVolume(50.0f);

	// volume for the buttons sounds 
	sound[1].setVolume(150.0f);
	//  sound[4].setVolume(150.0f);//
	sound[2].setVolume(20.0f);

	sound[0].play(); //Start Menu Music playing at the back ground
	sound[0].setLoop(true);


	//anti alising
	ContextSettings settings;
	settings.antialiasingLevel = alising;
	// the window
	RenderWindow window(VideoMode::getDesktopMode(), "Google Dinosaur!!", Style::Fullscreen,settings);
	//vysnc
	window.setVerticalSyncEnabled(boxVys);

	//Game Body
	while (window.isOpen())
	{
		Event event;
		while (window.pollEvent(event))
		{

			// Pausing the game after pressing Escape Key
			if (event.KeyPressed && event.key.code == Keyboard::Escape && game_state == 1)
				isPaused = true;


			//start menue
			if (game_state == 0)
			{

				menuMouse(menuboxes, selectedOption, window, check,0); // change selected option by the mouse 
				menufun(selectedOption, event);  // change selected option by the keyboard

				if (event.type == Event::KeyPressed && event.key.code == Keyboard::Enter && !isSettingsOpen || check /*to check if the mouse is over any boxes*/ && event.type == Event::MouseButtonPressed && !isSettingsOpen)
				{
					//start
					if (selectedOption == 0) 
					{
						game_state = 1; // the game started playing
						sound[0].pause(); // the music for the start menu will stop;
						sound[1].play(); // music for start button click
					}
					//settings
					if (selectedOption == 1) 
					{
						isSettingsOpen = true;
						sound[2].play();
					}
					//quit
					if (selectedOption == 2) {
						sound[2].play();
						sound[0].pause(); // the music for the start menu will stop;

						window.close(); 
					}
				}
				if (isSettingsOpen) 
				{
					settingsFun(window, settingsBoxes, event);

				}

			}
			//pause menu
			if (isPaused)
			{
				menuMouse(menuboxes, selectedOption, window, check, 3);
				menufun(selectedOption, event);
				if (event.type == Event::KeyPressed && event.key.code == Keyboard::Enter && !isSettingsOpen || check && event.type == Event::MouseButtonPressed && !isSettingsOpen)
				{    
					//resume
					if (selectedOption == 0)
					{
						 game_state = 1;  
						isPaused = false;
						sound[2].play();

					}
					//settings
					if (selectedOption == 1)
					{
						sound[2].play();
						isSettingsOpen = true;
					}
					//quit
					if (selectedOption == 2)
					{
						sound[2].play();
						window.close();
					}

				}
				if (isSettingsOpen)
				{
					settingsFun(window, settingsBoxes, event);

				}
		    } 
	    }    

		window.clear(Color::Black);

		//draw start menu 
		if (game_state == 0)
		{
			//textures for the start menu
			for (int i = 0; i < 5; i++) 
				window.draw(textures[i]);
			// start menu boxes
			for (int i = 0; i < 3; i++) 
				window.draw(menuboxes[i]);
			//draw start menu texts
			for (int i = 0; i < 3; i++)
				window.draw(menu[i]);
			
		
			window.draw(paneltext);
			window.draw(titletext);

			//draw settings
			if (isSettingsOpen)
			{
				// background for the settings
				window.draw(textures[5]);
				//draw setttings texts
				for (int i = 0; i < 5; i++) 
				{
					window.draw(settingsText[i]);
				}
				//draw settings boxes
				for (int i = 0; i < 5; i++)
				{
					window.draw(settingsBoxes[i]);
				}

			}

			checkOption(selectedOption, menu, 0, 1, 2);  //hover effect for the start menu 

		}
		// draw pause menu
		if (isPaused)
		{
			//draw textures for the pause menu
			for (int i = 0; i < 4; i++) 
				window.draw(textures[i]);
		    // pause menu boxes
			for (int i = 3; i < 6; i++) 
				window.draw(menuboxes[i]);
			// draw pause menu texts
			for (int i = 3; i < 6; i++)
				window.draw(menu[i]);
		
			// draw settings for the pause menu
			if (isSettingsOpen) 
			{
				// the back ground for the settings
				window.draw(textures[5]);
				//draw settings text
				for (int i = 0; i < 5; i++) {
					window.draw(settingsText[i]);
				}
				//draw settings boxes
				for (int i = 0; i < 5; i++)
				{
					window.draw(settingsBoxes[i]);
				}

			}

			checkOption(selectedOption, menu, 3, 4, 5);  //hover effect for the pause menu

		}

		window.display();
	} //while loop
}// main


